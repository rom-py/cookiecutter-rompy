name: Build and Release to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v0.2.1, etc.
  workflow_dispatch:  # Allow manual triggering
    inputs:
      test_release:
        description: 'Release to Test PyPI instead of PyPI'
        required: false
        default: false
        type: boolean

jobs:
  build:
    name: Build distribution packages
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for proper versioning

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine

    - name: Build package
      run: python -m build

    - name: Check distribution
      run: python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  test:
    name: Run tests before release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[dev]

    - name: Run tests
      run: pytest


  publish-test:
    name: Publish to Test PyPI
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_release == 'true'
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/{{cookiecutter.project_name}}
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/

  publish:
    name: Publish to PyPI
    needs: [build, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  create-release:
    name: Create GitHub Release
    needs: [publish]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Extract changelog for version
      id: changelog
      run: |
        # Extract changelog section for this version
        if [ -f CHANGELOG.md ]; then
          awk "/^## \[?${{ steps.version.outputs.VERSION }}\]?/ {flag=1; next} /^## / {flag=0} flag" CHANGELOG.md > release_notes.md
          if [ ! -s release_notes.md ]; then
            echo "No changelog found for version ${{ steps.version.outputs.VERSION }}" > release_notes.md
          fi
        else
          echo "Release ${{ steps.version.outputs.VERSION }}" > release_notes.md
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body_path: release_notes.md
        files: dist/*
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
